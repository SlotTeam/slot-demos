var connect = require('connect'),
    http = require("http"),
    url = require("url"),
    path = require("path"),
    fs = require("fs"),
    mime = require("mime"),
    port = process.argv[2] || 80 /*8888*/;

function Slot() {
    this.key = "";
    this.value = "";
}

var slots = new Object();
var slotModels = new Object();
var templates = new Object();
//
function s4() {
    return Math.floor((1 + Math.random()) * 0x10000)
        .toString(16)
        .substring(1);
};
function guid() {
    return s4() + s4() + '-' + s4() + '-' + s4() + '-' +
        s4() + '-' + s4() + s4() + s4();
}

var manyTabs = 0;
var tabs = "  ";
//
function logmsg(message) {
    var index = 0;

    while (index++ < manyTabs) {
        message = tabs + message;
    }
    console.log(message);
};

function execJsonBinding(slotKey, uriBuildKey, fileContent, filename, binds/*jsonBindFile*/, callback) {

    /**
     * Define an Object for the new Slot
     */
    //slotModels[slotKey] = new Object();
    slotModels[slotKey] = slotModels[slotKey] ? slotModels[slotKey] : new Object();

    manyTabs++;

    //if(binds.length > 0) {
        for(var field in binds) {
            // Debug off: logmsg("field : " + field + "[" + binds[field] + "]");

            /**
             * TODO:
             *  1.  Cambiar la estructura:
             *          "travelsIns": "slot:cards:/examples/landpage/travelInsuranceCards.json",
             *      por:
             *          "travelsIns": {slot:"cards", bind:"/examples/landpage/travelInsuranceCards.json"},
             *      de esta forma todo ser√° mas entendible
             */
            if(binds[field].split(":")[0] == "slot") {

                var uuid = guid();
                var slotKeyNew = binds[field].split(":")[1];    //Get template key
                var slotUri = slotUri = slots[uriBuildKey][slotKeyNew];      //Get template Uri
                var slotFilename = path.join(process.cwd(), /*"/www" + slotUri*/ slotJson.webRootDir, slotUri);

                logmsg("create slot[" + slotKeyNew + "] template[" +slotUri+ "] binds[" +slotFilename+ "]");

                //slotModels[slotKeyNew] = new Object();

                var template = undefined;

                try {
                    template =
                    loadFile(slotKeyNew,                       // <<== Uri parameter
                            slotUri,                        // <<== Uri parameter
                            uriBuildKey,
                            slotFilename,                   // <<== Full template path
                            binds[field].split(":")[2],     // <<== Full jsonBindFile path (if was declared on slot definition field)
                            function () {
                                return "Slot template not found " + slotFilename;
                            },
                            function (err) {
                                return "Slot template read error " + slotFilename;
                            },
                            function (fileX, fileContent) {
                                //logmsg("--");
                                return fileContent;
                            }
                    );
                }
                catch (e) {
                    logmsg("Exception on " + uuid + " " + e);
                }

                fileContent = fileContent.replace(RegExp("{@" + field + "@}","g"), template);

                logmsg("--");
                //slotModels[slotKey][field] = slotModels[slotKeyNew];
                slotModels[slotKey][field] = new Object();
                slotModels[slotKey][field].slot = slotKeyNew;

                /**
                 * TODO:
                 *  1.  Recorrer cada property del slotModels[slotKeyNew] para construir el Object
                 *      segun el slotObjectDefinitionTemplate.txt
                 *  2.  Tomar el path del template usando slots[uriBuildKey][slotKeyNew]
                 *                  for(var k in defs["slots[uriBuildKey]"]) slots[uriBuildKey][k]=defs["slots"][k];
                 */
            }
            else {
                fileContent = fileContent.replace(RegExp("{@" + field + "@}","g"), binds[field]);

                logmsg("add field to slot[" + slotKey + "] field[" +field+ "]");
                slotModels[slotKey][field] = "";
            }
        }
    /*}
    else {
        slotModels[slotKey]*//*[field]*//* = new Object();
        slotModels[slotKey]*//*[field]*//*.slot = slotKey;
    }*/

    manyTabs--;

    return callback(fileContent);
}

function loadFile(slotKey, uri, uriBuildKey, filename, jsonBindFile, onDontExistsCallback, onReadFileError, onBindComplete) {

    // Debug off: logmsg("load  : " + filename);

    var exists = fs.existsSync(filename), uriFileName = uri;

    if (!exists) { // <<== function called if template don't exists
        return onDontExistsCallback();
    }

    if (fs.statSync(filename).isDirectory()) {
        filename += (filename.lastIndexOf(path.sep)+1==filename.length ? 'index.html' :  path.sep+'index.html');
        uriFileName = uriFileName.replace(/\/+$/, '');
        uriFileName += (uri.lastIndexOf(path.sep)+1==uri.length ? 'index.html' :  /*path.sep*/'/'+'index.html');
    }

    try {
//        var file = templates[filename] == undefined
//                 ? (templates[filename]=fs.readFileSync( filename ,'binary' /*'utf8'*/))
//                 : templates[filename];
        var file = (templates[filename]=fs.readFileSync( filename ,'binary' /*'utf8'*/));
        //slots[uriBuildKey][slotKey] = uri /*uriFileName*/;

        /**
         * Bind just allowed extentions (html, htm)
         * TODO:
         *  1.  Create allowExt.json to define wich extentions are allowed to be binded
         */
        if((filename.split(".")[filename.split(".").length-1]).toLowerCase() == "html") {

            //manyTabs++;

            var bindDir = path.join(process.cwd(), slotJson.metaData /*"/bind"*/);

            /**
             * Si no hemos pasado el jsonBindFile, pues entonces tomamos bind segun el nombre del html
             * con el que estamos trabajando.
             */
            ////var jsonBindFile = path.join(bindDir, uri.replace(/.html/gi, ".json"));
            //jsonBindFile = (jsonBindFile == undefined ? path.join(bindDir, uri.replace(/.html/gi, ".json")) : jsonBindFile);
            jsonBindFile = (jsonBindFile == undefined ? path.join(bindDir, uriFileName.replace(/.html/gi, ".json")) : path.join(bindDir, jsonBindFile));
            //jsonBindFile = (jsonBindFile == undefined ? path.join(slotJson.metaData, uriFileName.replace(/.html/gi, ".json")) : path.join(slotJson.metaData, jsonBindFile));

            // Debug off: logmsg("bind  : " + jsonBindFile);

            if (fs.existsSync(jsonBindFile)) {
                // Debug off: logmsg("bind  : " + jsonBindFile + " exists " + exists);
                slots[uriBuildKey] = slots[uriBuildKey] ? slots[uriBuildKey] : new Object();
                slots[uriBuildKey][slotKey] = uri /*uriFileName*/;

                /**
                 * Create model for current slot
                 */
                //slotModels[slotKeyNew] = new Object();

                /**
                 * Parse fields and slots defined on JSON File.
                 */
                jsonBindFile = fs.readFileSync( jsonBindFile ,'binary' /*'utf8'*/);

                var defs = JSON.parse(jsonBindFile);
                var binds = defs["binds"];
                //
                for(var k in defs["slots"]) slots[uriBuildKey][k]=defs["slots"][k];
                delete defs;

                /**
                 * Call bindings
                 */
                if(binds instanceof Array) {

                    var rows = "";

                    //Iterate over each slot data record
                    for(var row in binds) {

                        //Doing binding
                        rows += execJsonBinding(slotKey, uriBuildKey, file, filename, binds[row],
                            function (fileContent) { // <<== function called after binding templates
                                //logmsg("--");
                                return fileContent;
                            }
                        );
                    }

                    return onBindComplete(filename, rows);
                }
                else {
                    //Doing binding
                    return execJsonBinding(slotKey, uriBuildKey, file, filename, binds,
                        function (fileContent) { // <<== function called after binding templates
                            return onBindComplete(filename, fileContent);
                        }
                    );
                }
            }
            //else {
            //    return onBindComplete(filename, file);
            //}

            manyTabs--;
        }

        return onBindComplete(filename, file);
    }
    catch (e) {
        logmsg("loading exception: " + filename);
        return onReadFileError(e);
    }
}

function prefixFileName(fullFilePath, prefix) {
    var filename = fullFilePath.split(path.sep).pop();
    fullFilePath = fullFilePath.replace(filename, prefix + upperCaseChar0(filename));

    return fullFilePath;
}

function upperCaseChar0(word) {
    return word.charAt(0).toUpperCase() + word.substr(1, word.length);
}

var app = connect()
    .use(connect.favicon())
    .use(connect.cookieParser())
    .use(connect.session({ secret: 'keyboard cat', cookie: { maxAge: 60000 }}))
    .use(function (request, response, next) {

        /**
         * Load Slot Designer Server configuration file
         */
        fs.readFile(path.join(process.cwd(), "slot.json".replace(/\//g, path.sep)) ,'binary' /*'utf8'*/, function(err, buffer) {

            slotJson = new Object();
            if(!err)
                // Slot Server configuration file was found
                slotJson = JSON.parse(buffer);

            // Validate default values
            slotJson["metaData"]    = slotJson["metaData"]      ? slotJson["metaData"]      : "/bind";
            slotJson["webRootDir"]  = slotJson["webRootDir"]    ? slotJson["webRootDir"]    : "/www";
            slotJson["mvcRootDir"]  = slotJson["mvcRootDir"]    ? slotJson["mvcRootDir"]    : "/app/mvc";
            slotJson["restRootDir"] = slotJson["restRootDir"]   ? slotJson["restRootDir"]   : "/app/rest";
            slotJson["dbRootDir"]   = slotJson["dbRootDir"]     ? slotJson["dbRootDir"]     : "/app/db";
            slotJson["restFilter"]  = slotJson["restFilter"]    ? slotJson["restFilter"]    : "/rest";
            slotJson["mvcFilter"]   = slotJson["mvcFilter"]     ? slotJson["mvcFilter"]     : "/mvc";

            /**
             * TODO:
             *  1.  Load slotsDef.json
             */

            var uri = url.parse(request.url).pathname,
                uriBuildKey = url.parse(request.url).pathname.replace(/\//g, "-"),
                filename = path.join(process.cwd(), slotJson.webRootDir /*"/www" + uri*/, uri);

            /**
             * Load requested file
             * loadFile(slotKey, uri, filename, jsonBindFile, onDontExistsCallback, onReadFileError, onBindComplete)
             */
            loadFile("main", // <<== slotKey
                uri,
                uriBuildKey,
                filename,
                undefined,    // <<== Pass jsonBindFile as undefined to force to use default named jsonBinder
                function () { // <<== onDontExistsCallback: function called if template don't exists
                    response.writeHead(404, {"Content-Type": "text/plain"});
                    response.write("404 Not Found\n");
                    response.end();
                },
                function (err) { // <<== onReadFileError: function called if and error reading template occurs
                    response.writeHead(500, {"Content-Type": "text/plain"});
                    //response.write(err + "\n");
                    response.write("500 Not Found\n" + uri);
                    response.end();
                },
                function (filename, fileContent) { // <<== onBindComplete: function called after binding templates
                    response.writeHead(200, {"Content-Type": mime.lookup(filename)});
                    response.write(fileContent, "binary");
                    response.end();

                    /**
                     * If valid URL path whit allowed Slot rendering, we are going to generate
                     * Slot Models.
                     */
                    if(/*slots[uriBuildKey].length &&*/ (filename.split(".")[filename.split(".").length-1]).toLowerCase() == "html") {
                        if(slots[uriBuildKey] && Object.keys(slots[uriBuildKey]).length) {
                            var os = require("os"),
                                nowTimeStamp = (new Date()).toDateString() + " " + (new Date()).toLocaleTimeString();
                            var uri = url.parse(request.url).pathname,
                                modelName       = filename.split(process.cwd())[1];
                                modelName       = path.join(slotJson.mvcRootDir, modelName.replace("\\www", ""));
                                modelName       = modelName.replace(/^\\/, ''); //Remove first backslash
                            var modelFile       = prefixFileName(modelName, "m").replace(".html", ".js");
                            var modelFileSrv    = prefixFileName(modelName, "m").replace(".html", "Srv.js");
                            var viewFile        = prefixFileName(modelName, "v").replace(".html", ".js");

                            var mkdirp = require('mkdirp'),
                                mcvFolder = ( modelName),
                                mcvFile = mcvFolder.split(path.sep).pop(),
                                mcvFolder = mcvFolder.replace(mcvFile, "");
                            //
                            //Add code to enssure directory is fullpath created
                            //
                            mkdirp(mcvFolder, function (err) {
                                if (err) console.error(err)
                                else {
                                    console.log('creating MVC for ' + modelName)

                                    /**
                                     * TODO:
                                     *  1.  Recorrer cada property del slotModels[slotKeyNew] para construir el Object
                                     *      segun el slotObjectDefinitionTemplate.txt
                                     *  2.  Tomar el path del template usando slots[uriBuildKey][slotKeyNew]
                                     *
                                     */
                                    var tempTemplate = fs.readFileSync(__dirname + '/templates/slotObjectDefinitionTemplate.txt','binary' /*'utf8'*/),
                                        attrs = "",
                                        obj = "",
                                        objs = "",
                                        val = "",
                                        layouts = "";
                                    for(var sl in slots[uriBuildKey]) {
                                        obj = tempTemplate.replace(RegExp("{@slotName@}","g"),   sl);
                                        attrs = "";

                                        for (var fl in slotModels[sl]) {
                                            val =  typeof slotModels[sl][fl] == "object"    //<<== there is a Model, represented as an Object
                                                //&& slotModels[slotModels[sl][fl]["slot"]]   //<<== Validate if this model have defined a Slot yet
                                                && slotModels[sl][fl]["slot"]               //<<== Validate if this model have defined a Slot yet
                                                ? slotModels[sl][fl]["slot"]                //<<== Take the Slote name
                                                : "\"\"";                                   //<<== Don't assign a Slot name
                                            attrs += "\r\n\tthis." + fl + " = " + val + ";";
                                        }

                                        obj = obj.replace("{@slotAttributes@}",   attrs);
                                        objs += obj;

                                        /**
                                         * Take the html template
                                         */
                                        //var tempLayout = templates[path.join(process.cwd(), slots["cards"])];
                                        var tempLayout = templates[path.join(process.cwd(), slotJson.webRootDir /*"/www"*/ + slots[uriBuildKey][sl])];
                                        tempLayout = tempLayout
                                                    .replace(RegExp("\r","g"), "@@SLR@@")
                                                    .replace(RegExp("\n","g"), "@@SLN@@")
                                                    .replace(RegExp("\t","g"), "@@SLT@@")
                                                    .replace(RegExp("'","g"), "@@SQUOTE@@")
                                                    .replace(RegExp("\"","g"), "@@DQUOTE@@")
                                                    .replace(RegExp("<","g"), "@@LT@@")
                                                    .replace(RegExp(">","g"), "@@GT@@")
                                                    //.replace(RegExp("*","g"), "@@ASTE@@")
                                                    .replace(/\*/g, "@@ASTE@@")
                                                    .replace(RegExp("/","g"), "@@BSLASH@@")
                                                    ;
                                        layouts += "\r\n\t\tthis." + sl + " = \"" + tempLayout + "\";";
                                    }

                                    tempTemplate = fs.readFileSync(__dirname + '/templates/modelTemplate.txt','binary' /*'utf8'*/);
                                    tempTemplate = tempTemplate
                                        //.replace("{@jsonModel@}",   JSON.stringify(slotModels, null, 4))
                                        .replace("{@objectsDef@}",  objs)
                                        .replace("{@layouts@}",     layouts)
                                        ;
                                    fs.writeFile(modelFile, tempTemplate, function (err) {
                                        if (err) throw err;
                                        console.log('It\'s saved model for client side!');
                                    });

                                    tempTemplate = fs.readFileSync(__dirname + '/templates/modelTemplateSrv.txt','binary' /*'utf8'*/);
                                    tempTemplate = tempTemplate
                                        .replace("{@pc-machine@}",  os.hostname())
                                        .replace("{@date@}",        nowTimeStamp)
                                        .replace("{@message@}",     modelFileSrv.split(path.sep).pop() + ", this model holds the data structure for the web page")
                                        .replace("{@page@}",        uri)
                                        //.replace("{@jsonModel@}",   JSON.stringify(slotModels, null, 4))
                                        .replace("{@objectsDef@}",  objs)
                                        .replace("{@layouts@}",     layouts)
                                    ;
                                    fs.writeFile(modelFileSrv, tempTemplate, function (err) {
                                        if (err) throw err;
                                        console.log('It\'s saved model for server side!');
                                    });

                                    fs.exists(viewFile, function(flag) {
                                        if(!flag){
                                            tempTemplate = fs.readFileSync(__dirname + '/templates/viewTemplate.txt','binary' /*'utf8'*/);
                                            tempTemplate = tempTemplate
                                                            .replace("{@pc-machine@}",  os.hostname())
                                                            .replace("{@date@}",        nowTimeStamp)
                                                            .replace("{@message@}",     viewFile.split(path.sep).pop() + ", this view was built to serve web page")
                                                            .replace("{@page@}",        uri)
                                                            .replace(RegExp("{@modulePath@}", "g"),  "./" + modelFileSrv.split(path.sep).pop())
                                                            ;

                                            fs.writeFile(viewFile, tempTemplate, function (err) {
                                                if (err) throw err;
                                                console.log('It\'s saved view file!');
                                            });
                                        }
                                    });
                                }
                            });
                        }
                        else {
                            console.log("Resource " + filename + " does not have a slot definition, no MVC objects will be created")
                        }
                    }
                }
            );
        });
    }
);

function start(port) {

    http.createServer(app).listen(parseInt(port, 10));

    logmsg("Designer Server running at\n  => http://localhost:" + port + "/\nCTRL + C to shutdown");
}
/**
 * Export functions
 */
module.exports.start = start;