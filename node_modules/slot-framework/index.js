/**
 * Created by cecheveria on 2/2/14.
 */
var connect = require('connect'),
    http = require("http"),
    url = require("url"),
    path = require("path"),
    fs = require("fs"),
    mime = require("mime"),
    Render = require("./render"),
    Paginate = require("./paginate"),
    Designer = require("./designer"),
    resourcesCache = new Object(),
    viewsExistsCache = new Object(),
    devMode = true,
    port = process.argv[2] || 801 /*8888*/
    ;

var clientControler,
    slotJson;

function isMvcApiCall(uri) {
    return uri.indexOf(slotJson.mvcFilter) == 0;
}
function isRestApiCall(uri) {
    return uri.indexOf(slotJson.restFilter) == 0;
}
function thereIsCommand(lastCommand ) {
    return lastCommand == "current" || lastCommand == "first" || lastCommand == "last" || lastCommand == "next" || lastCommand == "back";
}

function route(request, onDontExists, onReadFileError, onNoRoutable, onInvalidView, onBindComplete, onRestful) {

    var uri = url.parse(request.url).pathname,
        filename = path.join(process.cwd(), slotJson.webRootDir /*"/www"*/ + uri);

    /**
     * Copiado desde loaFile
     */
    var uriFileName = uri;
    fs.exists(filename, function(err) {
        var isRest = false,
            isMvcCall = false;
        //
        if (!err) { // <<== function called if template don't exists
            isRest = isRestApiCall(uri);
            //
            if(isRest)
                filename = path.join(process.cwd(), slotJson.restRootDir, uri.replace(slotJson.restFilter /*"/rest"*/, ""));
            else {
                isMvcCall = isMvcApiCall(uri);
                if(isMvcCall)
                    filename = path.join(process.cwd(), slotJson.mvcRootDir, uri.replace(slotJson.mvcFilter /*"/mvc"*/, ""));
                else
                    return onDontExists();
            }
        }

        if (!isRest && !isMvcCall && fs.statSync(filename).isDirectory()) {
            filename += (filename.lastIndexOf(path.sep)+1==filename.length ? 'index.html' :  path.sep+'index.html');
            uriFileName += (uri.lastIndexOf(path.sep)+1==uri.length ? 'index.html' :  path.sep+'index.html');
        }

        try {
            /**
             * Bind just allowed extentions (html, htm)
             * TODO:
             *  1.  Create allowExt.json to define wich extentions are allowed to be routed
             */
            if((filename.split(".")[filename.split(".").length-1]).toLowerCase() == "html") {

                var modelName       = filename.split(process.cwd())[1];
                    modelName       = path.join(slotJson.mvcRootDir, modelName.replace("\\www", ""));
                var modelCFile      = prefixFileName(modelName, "m").replace(".html", ".js");
                var modelSFile      = prefixFileName(modelName, "m").replace(".html", "Srv.js");
                var viewFile        = prefixFileName(modelName, "v").replace(".html", ".js");
                var mvcInjectorUrl  = slotJson.mvcFilter + modelName.replace(".html", "").replace(/\\/g, "/").replace(slotJson.mvcRootDir, "");

                var //modelC= "../../" + modelCFile.replace(/\\/g, "/"),    //<<== Model on client side
                    modelS= "../.." + modelSFile.replace(/\\/g, "/"),      //<<== Model on server side
                    view  = "../.." + viewFile.replace(/\\/g, "/"),        //<<== View on server side
                    view  = "../.." + viewFile.replace(/\\/g, "/");        //<<== View on server side

                var localViewFile = path.join(process.cwd(), viewFile); //process.cwd() + path.sep + viewFile;
                //
                if(viewsExistsCache[localViewFile] == undefined)
                    viewsExistsCache[localViewFile] = fs.existsSync(localViewFile);

                if(viewsExistsCache[localViewFile]) {
                    /**
                     * Dynamic module requiring, the module must be a valid Slot View
                     */
                    view = require(view);
                    modelS = require(modelS).model.create();

                    /**
                     * Validate if Slot View has well implemented the "run method"
                     */
                    if (view.run) {
                        view.run(modelS, request, function (modelFilled) {
                            var htmlContent = Render.render(modelFilled);

                            /**
                             * Inject client side model and client controller
                             */
                            //htmlContent = htmlContent.replace("</body>", "<script src='" + modelCFile.replace(/\\/g, "/") + "'></script></body>");
                            htmlContent = htmlContent.replace("</body>", "<script src='" + mvcInjectorUrl.replace(/\\/g, "/") + "'></script></body>");

                            /**
                             * Inject client side controller
                             * function Slot() {" + clientControler + "};
                             */
                            htmlContent = htmlContent.replace("</body>",
                                    "<script>" +
                                    "function slotF() {" +
                                    clientControler +
                                    "};" +
                                    "var Slot = new slotF();" +
                                    "</script></body>");

                            /**
                             * Return html content to MainController
                             */
                            onBindComplete(htmlContent);
                        });
                    }
                    else {
                        onInvalidView("Invalid view implementation");
                    }
                }
                else {
                    // Resolve No Routable html file
                    resolveNoRoutable(filename, onNoRoutable);
                }
            }
            else if(isRest) {
                /**
                 * TODO:
                 *  1.  Add REST definition strategi, may be a "conf file" or "json file"
                 */

                var modelName   = filename.split(process.cwd())[1];
                    modelName   = modelName.replace(/\\+$/, '');    // Delete last backslash

                var lastCommand = modelName.split("\\");
                    lastCommand = lastCommand[lastCommand.length-1].toLowerCase();

                modelName = thereIsCommand(lastCommand)
                            ? modelName.replace("\\"+lastCommand, "")
                            : modelName;

                var viewFile    = modelName + ".js";
                //
                var restModule  = "../.." + viewFile.replace(/\\/g, "/");        //<<== View on server side

                /**
                 * Dynamic module requiring, the module must be a valid Slot View
                 */
                restModule = require(restModule);

                /**
                 * Validate if REST Service have well implemented the "run method"
                 */
                if(restModule.run) {
                    /**
                     * Get paraemters
                     */
                    var query = (url.parse(request.url, true)).query;
                    var ajaxCallback = query.callback,
                        format = query.format,
                        pageSize = query.pageSize ? parseInt(query.pageSize) : 10 /*Set to defaultPageSize when no pageSize parameter have been passed on query String*/;
                    //
                    var response,
                        contentType =   (!format ? "json" : format).toLowerCase();
                        contentType =   ajaxCallback ? "text/javascript" :
                                        format == "json" ? "application/json" :
                                        format == "xml" ? "xml/text" :
                                        "application/json";
                    //
                    var sess = request.session,
                        sessionKey = modelName.split("\\").join('-');

                    console.log("sessionKey: " + sessionKey);

                    /**
                     * TODO:
                     *  1.  Implements method on REST Service to generate the key
                     */

                    if(thereIsCommand(lastCommand)) {
                        // Get buffer from session
                        var buffer = sess[sessionKey],
                            pageNum,
                            message = "";
                        
                        if(buffer) {
                            if(lastCommand == "current") {
                                pageNum = buffer.data.pageNumber;
                            }
                            else if(lastCommand == "first") {
                                pageNum = 1;
                            }
                            else if(lastCommand == "last") {
                                pageNum = buffer.data.totalPages;
                            }
                            else if(lastCommand == "next") {
                                pageNum = buffer.data.pageNumber + 1;
                                message = "The cursor is on last page, you can not move forward"
                            }
                            else if(lastCommand == "back") {
                                pageNum = buffer.data.pageNumber - 1;
                                message = "The cursor is on first page, you can not move backward"
                            }

                            //Get the page
                            response = Paginate.PageHelper.create().getPage(buffer.data.page, buffer.data.pageSize, pageNum);

                            // Evaluate if pagination was successful
                            if(response.error == 0)
                                // Save the new cursor page number
                                sess[sessionKey].data.pageNumber = pageNum;
                            else
                                // Return pagination fail message
                                response.msg = message;
                        }
                        else {
                            // Controlar si el buffer no se encuentra en la sesion, enviar mensaje de error.
                            response = Paginate.PageHelper.create().getPage(undefined, pageSize, 1);
                            response.msg = "Buffer not found or have been expired";
                        }

                        //Stringify content
                        var restContent = JSON.stringify(response);
                        restContent = ajaxCallback ? ajaxCallback + "(" + restContent + ")" : restContent;

                        /**
                         * Return html content to MainController
                         */
                        onRestful(restContent, contentType);
                    }
                    else {
                        restModule.run(request, function(data, format) {
                            var response;
                            //
                            if(Object.prototype.toString.call( data ) == "[object Array]") {
                                response = Paginate.PageHelper.create().getPage(data, pageSize, 1/*<== first page*/);

                                //Store refreshes data on session
                                sess[sessionKey] = Paginate.PageHelper.create().getPage(data, pageSize, 1);
                                sess[sessionKey].data.page = data;
                                sess[sessionKey].data.pageSize = pageSize;
                            }
                            else {
                                response = Paginate.ResponseBase.create();
                                response.data = data;
                            }
                            var restContent = JSON.stringify(response);
                                restContent = ajaxCallback ? ajaxCallback + "(" + restContent + ")" : restContent;

                            /**
                             * Return html content to MainController
                             */
                            onRestful(restContent, contentType);
                        });
                    }
                }
                else {
                    onInvalidView("Invalid rest service implementation");
                }
            }
            else if(isMvcCall) {

                var modelName   = filename.split(process.cwd())[1];
                modelName   = modelName.replace(/\\+$/, '');    // Delete last backslash

                var lastCommand = modelName.split("\\");
                lastCommand = lastCommand[lastCommand.length-1].toLowerCase();

                modelName = thereIsCommand(lastCommand)
                          ? modelName.replace("\\"+lastCommand, "")
                          : modelName;

                //var viewFile    = prefixFileName(modelName, "m") + ".js";
                //
                var localViewFile = path.join(process.cwd(), prefixFileName(modelName, "m") + ".js" /*viewFile*/);
                //
                if(viewsExistsCache[localViewFile] == undefined)
                    viewsExistsCache[localViewFile] = fs.existsSync(localViewFile);

                if(viewsExistsCache[localViewFile]) {
                    /**
                     * Return javascript content to web client
                     */
                    resolveNoRoutable(localViewFile, function(filename, buffer) {
                        onRestful(buffer/*restContent*/, "text/javascript" /*contentType*/);
                    });
                }
                else
                    onInvalidView("Invalid mvc implementation, model not found ");
            }
            else {
                // Resolve No Routable resource file
                resolveNoRoutable(filename, onNoRoutable);
            }
        }
        catch (e) {
            console.log("loading exception: " + filename);
            return onReadFileError(e);
        }
    });
}

function resolveNoRoutable(filename, onNoRoutable) {
    if(/*module.exports.devMode*/ devMode && resourcesCache[filename]) {
        console.log("Taking resource from cache " + filename);

        //Take resource from cache
        onNoRoutable(filename, resourcesCache[filename]);
    }
    else {
        fs.readFile(filename, 'binary' /*'utf8'*/, function (err, buffer) {
            console.log("Caching resource " + filename);

            //Save on Resource Cache
            resourcesCache[filename] = buffer;
            //Serve the resource
            onNoRoutable(filename, buffer /*file*/);
        });
    }
}

function start(port) {

    /**
     * TODO: Many domains - Proxy Server
     *  1.  Evaluate the use of Vhost from Connect Middleware, to implement a proxy support
     *      for many domains on same Node.js server.
     *
     *  http://www.senchalabs.org/connect/vhost.html
     *
    Vhost:

        Setup vhost for the given hostname and server.

        connect()
        .use(connect.vhost('foo.com', fooApp))
        .use(connect.vhost('bar.com', barApp))
        .use(connect.vhost('*.com', mainApp))
    The server may be a Connect server or
    a regular Node http.Server.

        String hostname
    Server server
    returns Function
     */

    var app = connect()
        .use(connect.favicon())
        .use(connect.cookieParser())
        .use(connect.session({ secret: 'keyboard cat', cookie: { maxAge: /*60000*/ 600000 }}))
        .use(function (request, response, next) {

            var uri = url.parse(request.url).pathname;
            //console.log("serving " + uri + " - init:" + (new Date()));

            route(request,
                // Function called if template don't exists
                function onDontExists() {
                    response.writeHead(404, {"Content-Type": "text/plain"});
                    response.write("404 Not Found\n");
                    response.end();
                },
                // Function called if and error reading template occurs
                function onReadFileError(err) {
                    response.writeHead(500, {"Content-Type": "text/plain"});
                    response.write("500 Not Found\n" + uri + "\n");
                    response.write(err + "\n");
                    response.end();
                },
                // Function called after loading a  non routable file
                function onNoRoutable(filename, fileContent) {
                    response.writeHead(200, {"Content-Type": mime.lookup(filename)});
                    response.write(fileContent, "binary");
                    response.end();

                    //console.log("serving " + uri + " -  end:" + (new Date()));
                },
                // Function called if and error reading template occurs
                function onInvalidView(err) {
                    response.writeHead(500, {"Content-Type": "text/plain"});
                    //response.write("500 Invalid View\n" + uri);
                    response.write("500 " + err + "\n" + uri);
                    response.end();
                },
                // Function called after binding templates
                function onBindComplete(fileContent) {
                    response.writeHead(200, {"Content-Type": "text/html"});
                    response.write(fileContent, "binary");
                    response.end();

                    //console.log("serving " + uri + " -  end:" + (new Date()));
                },
                // Function called to serve RestFul Wen Services
                function onRestful(fileContent, contentType) {
                    response.writeHead(200, {"Content-Type": contentType});
                    response.write(fileContent);
                    response.end();
                }
            );
        });

    /**
     * Load client controller javaScript
     */
    clientControler = path.join(process.cwd(), "node_modules/slot-framework/render.js".replace(/\//g, path.sep));
    //
    fs.readFile(clientControler ,'binary' /*'utf8'*/, function(err, buffer) {
        // Remove Node.js nomenclature
        clientControler = buffer
                        .replace("module.exports.render = render;", "")
                        .replace("module.exports.add = add;", "")
                        .replace("module.exports.unscape = unscape;", "")
                        //
                        .replace(RegExp("add", "g"), "renAdd")
                        .replace(RegExp("renderMain", "g"), "renMain")
                        .replace(RegExp("renderOne", "g"), "renOne")
                        .replace(RegExp("unscape", "g"), "this.unscape")
                        //
                        .replace(RegExp("render", "g"), "this.render")
                        .replace(RegExp("renAdd", "g"), "this.add")
                        .replace(RegExp("renMain", "g"), "this.renderMain")
                        .replace(RegExp("renOne", "g"), "this.renderOne")
                        ;

        /**
         * Load Slot Server configuration file
         */
        fs.readFile(path.join(process.cwd(), "slot.json".replace(/\//g, path.sep)) ,'binary' /*'utf8'*/, function(err, buffer) {

            slotJson = new Object();
            if(!err)
                // Slot Server configuration file was found
                slotJson = JSON.parse(buffer);

            // Validate default values
            slotJson["metaData"]    = slotJson["metaData"]      ? slotJson["metaData"]      : "/bind";
            slotJson["webRootDir"]  = slotJson["webRootDir"]    ? slotJson["webRootDir"]    : "/www";
            slotJson["mvcRootDir"]  = slotJson["mvcRootDir"]    ? slotJson["mvcRootDir"]    : "/app/mvc";
            slotJson["restRootDir"] = slotJson["restRootDir"]   ? slotJson["restRootDir"]   : "/app/rest";
            slotJson["dbRootDir"]   = slotJson["dbRootDir"]     ? slotJson["dbRootDir"]     : "/app/db";
            slotJson["restFilter"]  = slotJson["restFilter"]    ? slotJson["restFilter"]    : "/rest";
            slotJson["mvcFilter"]   = slotJson["mvcFilter"]     ? slotJson["mvcFilter"]     : "/mvc";

            // Start server
            http.createServer(app).listen(parseInt(port, 10));

            console.log("Slot Server started on port " + port);
        });
    });
}

function load() {
    /**
     * TODO:
     *  1.  Agregar logica para verificar si se han cargado o no los templates que
     *      se utilizan en la pagina que se va a servir
     */
}

function prefixFileName(fullFilePath, prefix) {
    var filename = fullFilePath.split(path.sep).pop();
    fullFilePath = fullFilePath.replace(filename, prefix + upperCaseChar0(filename));

    return fullFilePath;
}

function upperCaseChar0(word) {
    return word.charAt(0).toUpperCase() + word.substr(1, word.length);
}


/**
 * Export functions
 */
//module.exports.devMode = true;
module.exports.setDevMode = function (flag) {
    devMode = flag;
};

module.exports.start = start;
//module.exports.load = load;
module.exports.render = Render.render;
module.exports.responseBase = Paginate.ResponseBase;
module.exports.responsePage = Paginate.ResponsePage;
module.exports.pageHelper = Paginate.PageHelper;
module.exports.Util = function () {
    this.prefixFileName = prefixFileName;
    this.upperCaseChar0 = upperCaseChar0;
};

/**
 * Define modules for Designer Server
 */
module.exports.Designer = Designer;